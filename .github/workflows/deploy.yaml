name: Deploy to Kubernetes

on:
  workflow_call: # Add this trigger to make the workflow reusable
    inputs:
      dockerhub-username:
        required: true
        type: string
      dockerhub-password:
        required: true
        type: string
      kubernetes-context:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ inputs.dockerhub-username }}
          password: ${{ inputs.dockerhub-password }}

      # Step 4: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Step 5: Configure Kubernetes credentials
      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ inputs.kubernetes-context }}

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        run: |
          REPO_NAME=$(basename "$PWD")
          echo "Building Docker image for $REPO_NAME"
          docker build -t keanuwatts/theclusterflux:$REPO_NAME .

          echo "Pushing Docker image for $REPO_NAME"
          docker push keanuwatts/theclusterflux:$REPO_NAME

      # Step 7: Generate deployment.yaml dynamically
      - name: Generate deployment.yaml
        run: |
          REPO_NAME=$(basename "$PWD")
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: $REPO_NAME
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: $REPO_NAME
            template:
              metadata:
                labels:
                  app: $REPO_NAME
              spec:
                containers:
                  - name: $REPO_NAME
                    image: docker.io/keanuwatts/theclusterflux:$REPO_NAME
                    imagePullPolicy: Always
                imagePullSecrets:
                  - name: dockerhub-secret
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: $REPO_NAME
          spec:
            selector:
              app: $REPO_NAME
            ports:
              - protocol: TCP
                port: 8080
                targetPort: 8080
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: $REPO_NAME
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - $REPO_NAME.theclusterflux.com
              secretName: theclusterflux
            rules:
            - host: $REPO_NAME.theclusterflux.com
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: $REPO_NAME
                      port:
                        number: 8080
          EOF

      # Step 8: Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to Kubernetes using dynamically generated deployment.yaml"
          kubectl apply -f deployment.yaml
          kubectl rollout restart deployment $(basename "$PWD")